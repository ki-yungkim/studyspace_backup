## ----------------------
## JAVA 5일차 수업
## ----------------------
---------------------------------------------------------------
4일차 정리

객체 

면접 때 낚이는 질문 
왜 전공을 바꿨냐
뭘 배웠냐 -> 자바 -> 그게 뭐냐 -> 객체지향 -> 그게 뭐냐 계속 물린다

객체 
프로그램에서 관리해야할 모든 것

개발자 vs DB
DB로 가라 

속성 - 값 - 타입 - 제약

기능 (메서드)  
behavior opperation 
- 도구 - 1개 or 여러개 - 매서드의 매개변수 - 매개변수 그 기능을 수행하기 위해서 데이터를 받아서 
- 반환타입 - 자동형변환 (변수타입 매개변수타입 반환타입) - 단일, 다중 

클래스 - 속성과 기능 										
배열 
객체지향 특징 다형성

반환 타입 없는 경우 void
반환 타입 있는 경우 반드시 돌려줘야 한다 
return 나를 호출하는 메서드로 돌아간다


개발자들 규칙
	
## [DTO 객체의] 속성정보를 변경하는 메서드
-- setter()
-- 성적(score) 변경 메서드
	public void setScore(int modifyScore) {
		score = modifyScore;
	}

## [DTO] 객체의 속성정보를 조회하는 메서드
-- getter()
-- 성적(score) 조회 메서드
	public int getScore() { 
		return score;
	}
	
## overloading(중복정의) : 메서드
-- 메서드이름 동일 
-- 아규먼트 (매개변수) 다름 : 갯수, 타입, 순서

계산기능 하면서 알아봤다 
지나친 중복 정의는 코드의 가독성을 떨어뜨린다
정수형 제일 큰거 long
실수형 제일 큰거 double	

---------------------------------------------------------------

## worker method
-- 호출에 의해서 수행되는 메서드
-- 
	public int doA() {
		return xxx; 
	}
	
	public void doC() {
		if () {
			return; //더이상 수행하지 말고 호출 측으로 return을 넘김
		}
	}
## caller method
-- 필요에 의해서 다른 메서드를 호출하는 메서드 
-- 
	public void doB() {
		xxx = doA(xxx);
	}


오늘 할 것
----------------------
## 생성자 (Constructor)
## 생성자 중복정의
## this 키워드

----------------------




## class 확장
1. DTO Class(Domain Class)
-- 여기서 도메인 관리해야할 값을 가지고 있는 것
-- StudentScore
-- Member //확장해 나갈 것이다

** 
참고
도메인 전문가 -> 엄청 고급 기술자
업무 전반적인 것 다 이해, 관계 이해 
KT 차세대 프로젝트 많이 진행 중
**

2. Service Class 
-- 실제 제공해야하는 서비스 기능 모델링
-- StudentScoreService : 조회, 등록, 수정, 총점, 평균 등
-- MemberService : 요구사항 분석 설계 

-- 메서드를 모듈화 시키겠다 StudentScore + Service

main view test
 
3. Test Class
-- main() 시작메서드 시작클래스

## 클래스 의존관계 
-- 먼저 생성(작성)
 

## 주석문
-- 주석 (comment) 은 개발자가 보기 위한 도움글
-- 아주 가끔 주석 안에 있는 것 때문에 컴파일 문제 생길 때도 있다
-- 유지보수 목적 주석 가독성, 이해할 수 있게 작성 
-- 코드와 주석 분리 작성  : 코드 안에 주석이 들어가면 안된다. 가독성이 떨어짐

-- 주석의 종료 
1. // 한줄 주석 : 거의 모든 언어에서 지원
2. /* 여러줄 주석 내용 */

3. API 문서 주석 : 아무데나 쓰면 안된다.  **자바의 장점 API 문서 주석
	>> 형식 /** api 문서 주석 내용 기술 */
	>> 선언위치  : 클래스 선언문, 멤버변수 선언문, 메서드 선언문, 생성자 선언문 앞에 위치 
	>> api 문서 주석 구성요소 : html tag, plain-text, api 문서 전용 어노테이션 태그
	
	>> html tag : <pre> ... </pre> 
	>> api 문서 전용 어노테이션 태그 : 
		@author 작성자이름 
		@version ver.1.0
		@param 매개변수명 설명 
		@return 반환값 설명 
		@....

전달 받는 것 -> 매개변수 -> 매핑되는 것 -> argument -> 전달하는 것 파라미터

javadoc - 내가 개발한 클래스에 대한 html 기반 문서가 만들어진다
cmd에 javadoc 치면 -author  처럼 나온다

개발이 끝나면 API 주석 못 단다 다 까먹음 

## 개발이 완료(테스트 완료 정상 수행 가능)
-- jdk\bin> javadoc.exe -d docs\api -authoer -public *.javadoc
-- 지정한 폴더 html 형식의 api 문서파일 자동 생성 
-- 개발시에 api 문서 주석작성 필수******* 매우 중요 

주의
한글 폴더, 폴더 이름 공백  많은 문제가 생긴다

화이트 스페이스 항목 분리할 때 줄

클래스 메서드 구분할 때 두 줄  

같은 종류 한 줄씩 
다른 종류 두 줄씩 간격

실무에서는 어노테이션 주석 엄청 중요!!

@see 관련된 클래스 

crtl + shift + o


이젠 코드 안에 주석 들어가면 안됨

가장 중요한 건 서비스 응답 속도

IO를 줄여야한다




## 생성자 (Constructor)
-- 역할 (목적)
	1. 객체생성시에 멤버변수 데이터 초기화 : Domain  => 중복정의 : 전체속성, 필수속성
	2. 객체서비스 되기 전에 선행처리해야 하는 로직 수행 : Service => 아규먼트로 전달받은 배열크기로 배열생성 할당, 중복정의
	
-- 호출 시점
	>> new 객체 생성시에 자동 호출 수행
		
-- 특징
	>> 모든 클래스는 최소 1개 이상의 생성자가 존재해야 함
	>> 생성자 이름 클래스 이름과 동일
	>> 아규먼트 (갯수, 순서, 타입) 중복정의 가능
	>> 반환타입 표기해서는 안됨 (void)도 안됨

-- 기본 생성자 (default constructor)
	>> 개발자가 명시적으로 생성자를 1개도 정의하지 않으면 javac(컴파일시점) 자동으로 제공하는 생성자
	>> 기본 생성자 형식 : no arguments, empty body
	>> public 클래스이름() {}
				
	생성자와 매서드 혼동하는 경우가 있다
				
				
	클래스 만드는 이유 객체 생성해서 사용하기 위함
	
## 생성자 중복정의
-- 권장 : 개발자 명시적으로 생성자 중복정의시에 기본생성자도 함께 중복정의(이유 : 상속)
-- 필요에 의해서 기본생성자를 제공하지 않는 경우 있음 : 
	>> java.lang.Integer
	>> Wrapper API
	
	

## this 키워드
-- 객체 생성시에 자동으로 현재 객체를 지칭하는 참조변수
-- 사용방법 : 
	1. 현재 객체를 지칭 : this  
	2. 멤버변수 지칭 : this.멤버변수명
		>> 멤버변수명과 지역변수명을 동일하게 사용 가능 
		>> 멤버변수를 this 식별가능하기 때문에 (편리)
	3. 현재 객체의 다른 생성자를 호출시에 사용 
		>> 첫번째 수행문 위치 
		>> this(params)
		>> 생성자 중복정의시에 효율적 : 중복 코드 제거, 로직의 일관성 유지, 유지보수 편리 
		>> 객체 생성시에 공통 로직 : 생성자 위임설계해서 this() 호출 사용  

## 클래스 구성요소 순서 (개발규칙)
1. 멤버변수
2. 생성자
	>> 기본생성자
	>> 필수초기화생성자
	>> 전체초기화생성자

3. 메서드



stack area
지역변수, 매개변수
메서드 호출, 생성자수행 ~
메서드 종료, 생성자 종료
fram단위 메모리 상주 



## 내일 수업 예습
-- 객체지향 특징 : 
	>> Encapsulation, Inheritance, Polymorphism
	
-- 교재 05-7 : 정보은닉
-- 교재 08 상속과 다형성
