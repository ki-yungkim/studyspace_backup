###

요즘은 날 코딩 많이 시킨다 

3.5일간 한건 개발자가 개발하기에 가장 기본적인 걸 한거다
이제 진짜 JAVA
이번주 JAVA에서 진짜 중요하다
무너질 수도 있다 다 어렵다
다시 세우면 된다 
쓰고 지우고 최소 5번 짜보자 최적화 
해야 할 것 미루지 말고 바로 바로
스스로에게 강요

끝내고 메일 보내놓자
비전공자~ 이런 소리 하기 없기
다 똑같다

랜덤 조 짜기, 로또 번호 뽑기
강사님이 주신 것을 한줄 한줄 주석 달아보기

강사님이 주신 코드 받고 더 최적화 해보기

다른 사람한테 받을 경우 오류 뜨면 
패키지 이름 확인  
java 파일 이동 Refactor Move

개발자 관점에서 보지 말고 사용자 관점에서 짜자 

### 05/24 책 5~6장 
진짜 중요한 부분
수업 듣고 책 꼭 복습
책 읽듯이 쭉 쭉 읽기 계속 읽어보기
다 이해하려고 하지 말고


## ----------------------
## JAVA 4일차 수업
## ----------------------
-- 객체 (object) : 프로그램 대상이 되는 모든 것 
-- 클래스 (class) : 객체에 대한 청사진(blue print / template)
	=> 붕어빵 틀, 껍데기 - 식별X, 잘 만들어야 함
-- 인스턴스 (instance) : new 실제 메모리에 생선된 object(instance)
	=> 생성된 붕어빵1 붕어빵2 붕어빵x
-- 멤버변수 
-- 생성자
-- new keyword
-- this keyword

-- UML(Unified Modelling Language) - 찾아보기
	>> 객체지향 분석 설계시에 사용하기 위한 표준 표기방법 
	이해 당사자들이 많다 표준이 없으면 안된다
	
	>> Class Diagram - 찾아보기
	
-- UML Tools
	>> 상용화 : Rose, Together, StarUML 등
	>> 오픈소스 : StarUML (초반, 최신 버전은 유료) 
	유료 툴은 코드도 나온다 
	
	Rational Approach로 진행함
	관점의 차이
	
	Use Case View : 사용자 요구사항, 사용자 관점
	Logical View : 논리적 분석설계
	우클릭- Add diagram - ClassDiagram
	
	Class 누르고 창에 누르면 3칸 짜리 나옴
	
	클래스명
	멤버변수 우클릭-add - attribute - 더블클릭 - Visibility public - 오른 쪽 + 누르면 추가 됨
	
	우측 창에서 누르면 아래에 속성 나옴
	Type ... Data Type -  UML 타입들 나옴 - 안 누르고 직접 자바 타입 써줘도 됨
	
	int형 쓸 때 앞에 00 들어가면 없어져버림 숫자 데이터지만 문자형 타입으로 써야함
	
	studentNo: int = 210517
	studentNo: String = "000517"
	
	initialVale 에서 수정해도 됨
	
	add - opperation 
	
	
	
-- 소스파일 구조 : pakage, import
-- 클래스파일 구조 : 
	>> 속성, 기능
	>> 멤버변수, 생성자, 매서드
	
-- 변수 
-- 데이터타입

## 자바 특징
-- 객체지향(Object Oriented)

## 객체(Object)
-- 개념 : 
	>> 현실 세계에 존재하는 사물 또는 개념
	>> 개발자 관념: 프로그램의 대상이 되는 모든 것, 프로그램에서 관리해야하는 모든 것
	>> 관리를 하기 위해서 해당 객체의 정보가 영속성 (저장)
	
	
-- 구성요소 = 속성 + 기능
	>> 속성 : 객체 상태정보
	>> 기능 : 객체 행위(operation, behavior)
    
	>> 개발자관념
	>> 속성 : 멤버변수
	>> 기능 : 메서드([매개변수1, 매개변수 x]) : 반환 타입
	
	개발자관념에 따라 속성과 기능은 다르다
	모델링! 
	

	회사가면 데이터 딕셔너리 용어집 필요
	사람마다 뜻하는게 다른 경우가 있다	
	
-- 자동차 객체 
	>> 내가 사고(보유) 싶은 차량 정보
		>> 색상 : 흰색
		>> 차종 : 테슬라
	
	>> 주차장 차량 주차정보 
		>> 차량번호
		>> 위치
		>> 입차시간 
		>> 출차시간 
		>> 주차시간 = 출차시간 - 입차시간 
			-> 가공속성
		>> 정기 / 단기
		>> 경차 여부
		>> 전기차 여부
		>> 장애, 국가유공자 여부
		>> ...
		
		>> 기능 :
		>> 주차요금계산(????) : 요금타입 (정수형)
		>> 차량정보조회(차량번호) : 정보출력
		
		
		
	>> 중고차량 매매 정보
		>> 색상
		>> 차종
		>> 주행거리
		>> 사고유무
		>> 자동차등록증
		>> 침수여부
		>> 희망가격 
		
		>> 기능  
		>> 자동차판매등록(등록정보...??) : ???
		>> 자동차 조회() : 자동차정보출력??
		>> 자동차판매(???) : ???
		
## 웹 어플리케이션 개발
-- 일반 포털 사이트 운영
	>> 어떤 성격(서비스) 포털사이트 운영??
	
-- 객체 추출 : 

	>> 대상이 되는 모든 것 (관리 해야하는 모든 것)

	>> 고객 
	>> 게시판
	>> 상품
	
	기능, 웹페이지의 레이아웃 (배치) 구성 요소와 다르다.
	
-- 객체 구성요소 속성 추출 : 고객
	>> 어떤 성격 (서비스) 포털사이트 운영?
	>> 속성 추출 : 속성명, 타입, 변수명, 제약사항(constraint)
	>> 제약사항(constraint) : 필수/선택, unique (중복불가), 글자수(최대, 최소), 데이터타입, 형식(날짜, 시간 등)
	
	>> 고객 => class명 : Member(클래스명 대문자 시작)
	>> 아이디 : String, memberId(변수명), 식별키 = 필수 + 중복불가, 글자수  
	
	
## 객체 분석
	>> 분석가 : Class Diagram 모델링
	
	>> 개발자 : Class 작성 

## 학생의 성적 관리 프로그램 
-- 학생성적 객체 : StudentScore
	1. 학생번호(학번) : int, 식별키(필수, 중복 불가), studentNo
	2. 이름 : String, 필수, name
	3. 성적 : int, 선택, score


클래스 다이어그램


starUML

3칸
클래스 이름
멤버변수
매서드

---------------------------------
Member
---------------------------------
+ memberID:String = "Guest"

---------------------------------

---------------------------------
-- UML
	>> 클래스 선언 형식 : ClassName
	>> 멤버변수 선언 형식 : [access-modifier]변수명:타입 [=명시적초기값]
	>> 생성 선언 형식 : [access-modifier]클래스명*매갭변수명:타입, 매개변수명:타입x)
	>> 매서드 선언 형식 : [access-modifier]메서드명(매개변수명:타입, 매개변수명:타입x) : 반환타입
	


//
자바 접근 권한 
Public protected 생략(default) private
//


UML 작성 규칙

	멤버변수 
	[access - modifier]변수명 : 타입 [=명시적초기값]
	public(+) / protected(#) / 생략(default) / private(-)

	생성자
	[access-modifier]클래스(매개변수명:타입, 매개변수명:타입)
	
	메서드
	[access-modifier]메서드명(매개변수명:타입, 매개변수명:타입,  

	  
## MVC Pattern
	Pattern : 개발 중에 발생하는 문제에 대한 해결책 문서화, 표준화, 규칙 

-- Model 
	>> 업무로직, 서비스 
	>> 데이터베이스 접근로직(Data Access Object : DAO Pattern)
	>> 데이터를 가지고 이동하는 객체(Data Transfer Object : DTO Pattern)
		*Value Object (VO) 오래전 표현
	
	>> package com.work.model.service; 
	>> package com.work.model.dao;
	>> package com.work.model.dto;
	
-- View	
	>> 보여주기 위한  UI (User Interface)  
	>> UI : CUI / GUI
		: CUI console or command
	>> CUI : main() 실행메서드 클래스 
	>> pacakage com.work.view
	
-- Controller
	>> 요청 ~ 응답 제어 

 Web 가서 추가 설명	
 
기본
com.work.model.dto
com.work.view


의존관계 
성적 - 성적 테스트 
 
class - public과 default

네칸 띄기 

## 객체 생성 방법 및 객체의 구성요소(멤버변수, 메서드) 사용방법
-- 객체타입(참조형)
-- 클래스명은 객체타입이다 (중요!) 

-- 선언방법 :
	[modifiers] 클래스이름 참조변수명; 
-- 생성방법 : 
	참조변수명 = new 클래스명();
	
-- 생성한 객체의 구성요소 (멤버벼수, 메서드) 사용방법
	>> 참조변수명.멤버변수명 = [ 변경값 ];
	
	>> 참조변수명.메서드명([parameters]);
	>> 타입 변수명 = 참조변수명.메서드명([parameters]); 

매서드 안에 있는 것 지역변수 접근권한 default
java.lang, 같은 폴더에 있는 패키지 생략가능


## new 배열 객체 생성 순서(절차)
1. 메모리 할당 : 배열의 크기만큼
2. 기본값 자동 초기화
[3. 명시적 초기값 초기화] -> optional
4. 참조값(reference value) 할당

## new 객체 생성 순서(절차)
1. 메모리 할당 : 멤버변수들 선언되어있는 만큼
2. 기본값 자동 초기화
[3. 명시적 초기값 초기화] -> optional
4. 생성자 수행
5. 참조값(reference value) 할당


## 메서드
-- 객체가 해야하는 고유한 기능
-- 메서드명
-- 아규먼트(매개변수) : 갯수, 타입, 순서 
-- 반환타입 : 반환값 유무 
	>> 없으면 void 
	>> 존재하면 해당 반환타입
	
-- 반환값
	>> 단일 속성 : 기본형
	>> 다중 속성 : 객체형
	>> 여러개 (집합) : 배열, Collection API
	
-- 메서드 유형
	>> 매개변수 유무
	>> 반환값 유무
	
	1. 매개변수 없고, 반환타입 없음
	2. 매개변수 있고, 반환타입 없음
	3. 매개변수 없고, 반환타입 있음
	4. 매개변수 있고, 반환타입 있음

다른 언어에서는 function module 프로시저 라고 부른다

 



자바 메모리 
stack area : 지역변수 (매서드 생성자 제어문 매개변수) 
heap area  : new 객체생성 (클래스, 배열)
			클래스 멤버변수들
			배열크기

	
/
package com.work.view;

import com.work.model.dto.StudentScore;

public class Test {

	public static void main(String[] args) {
		StudentScore dto = new StudentScore();
	}
}
/
순서 
1. StudentScore dto -> 메모리 할당/ 변수, 깃발, 내 땅이다 
2. 기본값 선언 
	studentNo null
	name  null
	score 0
   
    null 대신에 명시적초기값
	studentNo "210517"
	
	
String : 기본형이 아니라 객체형  

3. 참조변수 
  new로 StudentScore에 있는 값 dto에 
  
 
 출력하려면 dto.studentNo 처럼 하면 된다.
 
 변경하려면 dto.studentNo = "202020"
 
 매서드
 매서드로 분리설계
 
 
 
 
 -- 메서드 유형
	>> 매개변수 유무
	>> 반환값 유무
	
	1. 매개변수 없고, 반환타입 없음
	2. 매개변수 있고, 반환타입 없음
	3. 매개변수 없고, 반환타입 있음
	4. 매개변수 있고, 반환타입 있음
	
	
	
메모리 
method area  / stack area / heap area  
class area
(static area)

doA()						



## return 분기문
-- 메서드 내부에서 사용
-- 해당 메서드를 호출한 메서드로 반환 
-- return;
	>> 반환값이 없는 void에서 필요시에 더이상 수행하지 않고 호출측 메서드로 반환 
	>> 선택
	
-- return 값;
	>> 메서드의 반환타입이 있으면 반드시 마지막 수행문
	>> 필수 
	
## 자동 형변환 (오토박싱)
-- 적용 : 변수, 매개변수, 반환타입
-- 기본형 : byte => short, char => int => long => float =>double
-- 참조형 : 자식 클래스 (sub-class) => 부모클래스(super class)	

## overloading(중복정의) : 메서드
-- 메서드이름 동일 
-- 아규먼트 (매개변수) 다름 : 갯수, 타입, 순서

## [DTO 객체의] 속성정보를 변경하는 메서드
-- setter()
-- 성적(score) 변경 메서드
	public void setScore(int modifyScore) {
		score = modifyScore;
	}

## [DTO] 객체의 속성정보를 조회하는 메서드
-- getter()
-- 성적(score) 조회 메서드
	public int getScore() { 
		return score;
	}
	